import json
import openai

from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_exempt, ensure_csrf_cookie


#Dumster Key
openai.api_key = "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"


@ensure_csrf_cookie
def index(request):
    return render(request, 'index.html')


@csrf_exempt
@require_POST
def process_json(request):
    try:
        json_data = json.loads(request.body.decode('utf-8'))
        user_input = json_data.get('text')
        response = funcgpt(user_input)
        result = {'response': response}
        return JsonResponse(result)

    except json.JSONDecodeError as e:

        error_message = {'error': 'Invalid JSON data  + –æ—à–∏–±–∫–∞ –Ω–∞ Frontend'}
        return JsonResponse(error_message, status=400)


@csrf_exempt
@require_POST
def companyinfo(request):
    try:
        json_data = json.loads(request.body.decode('utf-8'))
        user_input = json_data.get('text')
        response = funcgpt(user_input)
        result = {'response': response}
        return JsonResponse(result)

    except json.JSONDecodeError as e:

        error_message = {'error': 'Invalid JSON data  + –æ—à–∏–±–∫–∞ –Ω–∞ Frontend'}
        return JsonResponse(error_message, status=400)


def funcgpt(user_prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": f"—Ç—ã –∞—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–º–ø–æ—à–Ω–∏–∫ –ø–ª–æ—Ç—Ñ–æ—Ä–º—ã {companyinfo} –µ—Å–ª–∏ —Ç—É—Ç ModMe online"},
                {"role": "assistant", "content": f"–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –≤ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö"
                                                 f" —Å–º–æ—Ç—Ä—è –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–æ–º —ç—Ç–æ "
                                                 f"—Ä—É—Å—Å–∫–∏–π, —É–∑–±–µ–∫—Å–∫–∏–π –∏ –∏–Ω–¥–∞–Ω–µ–∑–∏–π—Å–∫–∏–π"},
                {"role": "user", "content": user_prompt},
            ]
        )

        return response['choices'][0]['message']['content']

    except Exception as e:
        # If there's an error, return it as a string to display on the frontend
        return "üìå –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω —Ç—Ä–∏" \
               "–∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–Ω—É—Ç—É!!!"





